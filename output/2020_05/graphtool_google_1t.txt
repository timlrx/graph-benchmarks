Profiling dataset data/google.txt
using 1 threads

Profiling loading
=================

Function: load_graph_from_csv(filename, directed=True, csv_options={'delimiter': '	', 'quotechar': '"'})
  --------------
  Min:      11.10778337100055
  Median:   11.179455159499412
  Mean:     11.19790757746985
  Stdev:    0.07347021476862667
  Max:      11.505892106000829
  --------------
  samples:  100

Profiling 2-hops
================

Function: shortest_distance(g, g.vertex(0), max_dist=2).a
  --------------
  Min:      0.003411403002246516
  Median:   0.0034741385006782366
  Mean:     0.0037350588198751212
  Stdev:    0.002416194781138339
  Max:      0.027635931997792795
  --------------
  samples:  100

Profiling shortest path
=======================

Function: shortest_distance(g, g.vertex(0)).a
  --------------
  Min:      0.08380748200215749
  Median:   0.08643105250121152
  Mean:     0.08660903551004594
  Stdev:    0.001473375108848185
  Max:      0.09462831999917398
  --------------
  samples:  100

Profiling PageRank
==================

Function: pagerank(g, damping=0.85, epsilon=1e-3, max_iter=10000000).a
  --------------
  Min:      1.418032082998252
  Median:   1.4568618920002336
  Mean:     1.4584043193599427
  Stdev:    0.01426686031679399
  Max:      1.4932974980001745
  --------------
  samples:  100

Profiling k-core
================

Function: kcore_decomposition(g).a
  --------------
  Min:      0.40502496100089047
  Median:   0.41782389399850217
  Mean:     0.41846134132025326
  Stdev:    0.006640468811604183
  Max:      0.4458848720023525
  --------------
  samples:  100

Profiling strongly connected components
=======================================

Function: cc, _ = label_components(g, vprop=None, directed=True, attractors=False); cc.a
  --------------
  Min:      0.27881226899989997
  Median:   0.28724704600244877
  Mean:     0.2874213112799407
  Stdev:    0.004077605132037939
  Max:      0.3016988129966194
  --------------
  samples:  100

