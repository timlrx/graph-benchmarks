Profiling dataset data/pokec.txt
Profiling loading
=================

Function: nk.readGraph(filename, nk.Format.SNAP)
  --------------
  Min:      22.8115492049983
  Median:   22.970107967499644
  Mean:     23.147042482199687
  Stdev:    0.46112173135609974
  Max:      24.30218742500074
  --------------
  samples:  10

Profiling shortest path
=======================

Function: nk.distance.BFS(g, 0, storePaths=False).run()
  --------------
  Min:      0.6126866750018962
  Median:   0.6194889089983917
  Mean:     0.6263162213999749
  Stdev:    0.022912546913608303
  Max:      0.6901710950005508
  --------------
  samples:  10

Profiling PageRank
==================

Function: nk.centrality.PageRank(g, damp=0.85, tol=1e-3).run()
  --------------
  Min:      0.18055697200179566
  Median:   0.18098050449953007
  Mean:     0.1817293227006303
  Stdev:    0.0016231728542923606
  Max:      0.18553838000298128
  --------------
  samples:  10

Profiling k-core
================

Function: nk.centrality.CoreDecomposition(g).run()
  --------------
  Min:      0.23169686799883493
  Median:   0.23347406100037915
  Mean:     0.23327678099994956
  Stdev:    0.0010415015482856274
  Max:      0.23460343899932923
  --------------
  samples:  10

Profiling strongly connected components
=======================================

Function: nk.components.StronglyConnectedComponents(g).run()
  --------------
  Min:      2.3288825929994346
  Median:   2.3845528360016033
  Mean:     2.385766060899914
  Stdev:    0.03733055942227792
  Max:      2.4390764290001243
  --------------
  samples:  10

