Profiling dataset data/google.txt
using 16 threads

Profiling loading
=================

Function: load_graph_from_csv(filename, directed=True, csv_options={'delimiter': '	', 'quotechar': '"'})
  --------------
  Min:      10.94058838500041
  Median:   11.018648290500323
  Mean:     11.041411719780031
  Stdev:    0.08530036224291607
  Max:      11.55842763999999
  --------------
  samples:  100

Profiling 2-hops
================

Function: shortest_distance(g, g.vertex(0), max_dist=2).a
  --------------
  Min:      0.0033663030008028727
  Median:   0.0034317740000915364
  Mean:     0.0036754634799399354
  Stdev:    0.002308833709877455
  Max:      0.026522766999732994
  --------------
  samples:  100

Profiling shortest path
=======================

Function: shortest_distance(g, g.vertex(0)).a
  --------------
  Min:      0.08011038400036341
  Median:   0.08259813700033192
  Mean:     0.08271915226999227
  Stdev:    0.001456088434636571
  Max:      0.08926839499963535
  --------------
  samples:  100

Profiling PageRank
==================

Function: pagerank(g, damping=0.85, epsilon=1e-3, max_iter=10000000).a
  --------------
  Min:      0.3531175179996353
  Median:   0.35940633500013064
  Mean:     0.36031416280004125
  Stdev:    0.0047814064274113045
  Max:      0.3827685989999736
  --------------
  samples:  100

Profiling k-core
================

Function: kcore_decomposition(g).a
  --------------
  Min:      0.3809467519995451
  Median:   0.39458776899982695
  Mean:     0.3952180431900069
  Stdev:    0.006369778079373187
  Max:      0.42080408099991473
  --------------
  samples:  100

Profiling strongly connected components
=======================================

Function: cc, _ = label_components(g, vprop=None, directed=True, attractors=False); cc.a
  --------------
  Min:      0.26936311999997997
  Median:   0.27705295050009227
  Mean:     0.2772443724300592
  Stdev:    0.003304980933928441
  Max:      0.28591837899966777
  --------------
  samples:  100

