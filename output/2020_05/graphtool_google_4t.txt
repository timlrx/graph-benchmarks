Profiling dataset data/google.txt
using 4 threads

Profiling loading
=================

Function: load_graph_from_csv(filename, directed=True, csv_options={'delimiter': '	', 'quotechar': '"'})
  --------------
  Min:      10.925986328998988
  Median:   11.002011237500483
  Mean:     11.013355023609838
  Stdev:    0.06602308592796043
  Max:      11.422064135997061
  --------------
  samples:  100

Profiling 2-hops
================

Function: shortest_distance(g, g.vertex(0), max_dist=2).a
  --------------
  Min:      0.0033701630018185824
  Median:   0.003446555998380063
  Mean:     0.0037176114997419063
  Stdev:    0.0025494383089450763
  Max:      0.02894649899826618
  --------------
  samples:  100

Profiling shortest path
=======================

Function: shortest_distance(g, g.vertex(0)).a
  --------------
  Min:      0.08352327000102377
  Median:   0.0857898779995594
  Mean:     0.08622389926000323
  Stdev:    0.0017896695775621212
  Max:      0.0982279859999835
  --------------
  samples:  100

Profiling PageRank
==================

Function: pagerank(g, damping=0.85, epsilon=1e-3, max_iter=10000000).a
  --------------
  Min:      0.6527720939993742
  Median:   0.6661752315012563
  Mean:     0.6671699338699546
  Stdev:    0.006607112658559747
  Max:      0.6905995489978523
  --------------
  samples:  100

Profiling k-core
================

Function: kcore_decomposition(g).a
  --------------
  Min:      0.40450531900205533
  Median:   0.4178103269987332
  Mean:     0.41963151436011686
  Stdev:    0.007621350312387351
  Max:      0.4368253280008503
  --------------
  samples:  100

Profiling strongly connected components
=======================================

Function: cc, _ = label_components(g, vprop=None, directed=True, attractors=False); cc.a
  --------------
  Min:      0.28325754099932965
  Median:   0.2894326400019054
  Mean:     0.2899582577301408
  Stdev:    0.003414470553398119
  Max:      0.2994731569997384
  --------------
  samples:  100

