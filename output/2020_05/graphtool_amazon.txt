Profiling dataset data/amazon.txt
using 16 threads
Profiling loading
=================

Function: load_graph_from_csv(filename, directed=True, csv_options={'delimiter': '	', 'quotechar': '"'})
  --------------
  Min:      2.583668902999989
  Median:   2.6059189570000854
  Mean:     2.6085465529300085
  Stdev:    0.01650046357547322
  Max:      2.6847483630001534
  --------------
  samples:  100

Profiling 2-hops
================

Function: shortest_distance(g, g.vertex(0), max_dist=2).a
  --------------
  Min:      0.0012300369999138638
  Median:   0.0012542729999722724
  Mean:     0.0012827873299897873
  Stdev:    0.00021595403889212146
  Max:      0.0033954549999180017
  --------------
  samples:  100

Profiling shortest path
=======================

Function: shortest_distance(g, g.vertex(0)).a
  --------------
  Min:      0.028247237999948993
  Median:   0.029204213000070922
  Mean:     0.029349003860022548
  Stdev:    0.0006587659105400244
  Max:      0.03230412500010971
  --------------
  samples:  100

Profiling PageRank
==================

Function: pagerank(g, damping=0.85, epsilon=1e-3, max_iter=10000000).a
  --------------
  Min:      0.039321330999882775
  Median:   0.040328278499941916
  Mean:     0.04044158939999761
  Stdev:    0.0007289333881231922
  Max:      0.04265180699985649
  --------------
  samples:  100

Profiling k-core
================

Function: kcore_decomposition(g).a
  --------------
  Min:      0.07449513500000648
  Median:   0.07806188100005329
  Mean:     0.0783644645300069
  Stdev:    0.00270575499789373
  Max:      0.09512315500001023
  --------------
  samples:  100

Profiling strongly connected components
=======================================

Function: cc, _ = label_components(g, vprop=None, directed=True, attractors=False); cc.a
  --------------
  Min:      0.08296361399993657
  Median:   0.0854674680001608
  Mean:     0.08598644866000087
  Stdev:    0.0019476425228215448
  Max:      0.09336903400003393
  --------------
  samples:  100

